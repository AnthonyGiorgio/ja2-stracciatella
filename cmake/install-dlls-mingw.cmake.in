# install the dlls of the executables

set(CMAKE_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(SDL2MAIN_LIBRARY "@SDL2MAIN_LIBRARY@")

# XXX add more core dlls when needed
set(WINDOWS_CORE_DLLS
    "advapi32.dll"
    "comctl32.dll"
    "comdlg32.dll"
    "gdi32.dll"
    "imm32.dll"
    "kernel32.dll"
    "msvcrt.dll"
    "ole32.dll"
    "oleaut32.dll"
    "shell32.dll"
    "user32.dll"
    "userenv.dll"
    "version.dll"
    "winmm.dll"
    "ws2_32.dll"
)

#
# get search directories
#

set(search_dirs)

macro (append_search_dirs dirs)
    foreach (dir IN LISTS dirs)
        if ("${dir}" MATCHES "^/.*")
            get_filename_component(dir "${dir}" ABSOLUTE)
            list(FIND search_dirs "${dir}" index)
            if ("${index}" STREQUAL "-1")
                list(APPEND search_dirs "${dir}")
            endif()
        endif()
    endforeach()
endmacro()

get_filename_component(dir "${SDL2MAIN_LIBRARY}" DIRECTORY)
list(APPEND search_dirs "${dir}") # sdl2 lib dir
get_filename_component(dir "${dir}" DIRECTORY)
list(APPEND search_dirs "${dir}/bin") # sdl2 bin dir

execute_process(
    COMMAND "${CMAKE_CXX_COMPILER}" -print-search-dirs
    OUTPUT_VARIABLE output
)

string(REGEX MATCH "install: [^\n]+" dirs "${output}")
string(REGEX REPLACE "^install: " "" dirs "${dirs}")
string(REPLACE ":" ";" dirs "${dirs}")
append_search_dirs(dirs) # gcc install dir

string(REGEX MATCH "libraries: [^\n]+" dirs "${output}")
string(REGEX REPLACE "^libraries: " "" dirs "${dirs}")
string(REPLACE ":" ";" dirs "${dirs}")
append_search_dirs(dirs) # gcc library dirs

string(REGEX MATCH "programs: [^\n]+" dirs "${output}")
string(REGEX REPLACE "^programs: " "" dirs "${dirs}")
string(REPLACE ":" ";" dirs "${dirs}")
append_search_dirs(dirs) # gcc program dirs

#
# use BundleUtilities (and GetPrerequisites) to copy dlls
#

function (gp_resolve_item_override context item exepath dirs resolved_item_var resolved_var)
    if (NOT ${resolved_var})
        string(TOLOWER "${item}" dll)
        list(FIND WINDOWS_CORE_DLLS "${dll}" index)
        if (NOT "${index}" STREQUAL "-1")
            set(${resolved_item_var} "/c/Windows/System32/${item}" PARENT_SCOPE) # missing core dll (cross compiling)
            set(${resolved_var} 1 PARENT_SCOPE)
        endif()
    endif()
endfunction()

function (gp_resolved_file_type_override resolved_file type_var)
    get_filename_component(dll "${resolved_file}" NAME)
    string(TOLOWER "${dll}" dll_lower)
    if (NOT "${dll_lower}" MATCHES ".*\\.dll")
        return() # only dlls
    endif()
    if ("${${type_var}}" STREQUAL "other")
        list(FIND WINDOWS_CORE_DLLS "${dll_lower}" index)
        if (NOT "${index}" STREQUAL "-1")
            set(${type_var} "system" PARENT_SCOPE) # ignore missing core dlls
        endif()
    elseif ("${${type_var}}" STREQUAL "system")
        list(FIND WINDOWS_CORE_DLLS "${dll_lower}" index)
        if ("${index}" STREQUAL "-1")
            set(${type_var} "other" PARENT_SCOPE) # copy non-core system dlls
        endif()
    endif()
endfunction()

include(BundleUtilities)
set(gp_tool "objdump")
fixup_bundle("${CMAKE_INSTALL_PREFIX}/ja2.exe" "" "${search_dirs}") # includes other exes in the same directory
